def setBuildStatus(String message, String state, String sha) {
    context = "continuous-integration/eclipse-omr/branch/linux_x86-64_cmprssptrs"
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/eclipse/omr"],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        commitShaSource: [$class: "ManuallyEnteredShaSource", sha: sha ],
        statusBackrefSource: [$class: "ManuallyEnteredBackrefSource", backref: "${BUILD_URL}flowGraphTable/"],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
    ]);
}

pipeline {
    agent{label 'Linux && x86'}
    environment {
        PATH = "/usr/lib/ccache/:$PATH"
        EXTRA_CONFIGURE_ARGS = "--enable-DDR"
    }
    stages {
        stage('Get Sources') {
            steps {
                timestamps {
                    checkout([$class: 'GitSCM', branches: [[name: '${MERGE_COMMIT}']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/eclipse/omr.git']]])
                    
                    setBuildStatus("In Progress","PENDING","${MERGE_COMMIT}")
                }
            }
        }
        stage('Build') {
            steps {
                timestamps {
                    echo 'Output CCACHE stats before running and clear them'
                    sh '''ccache -s -z'''
                    
                    echo 'Configure...'
                    sh '''make -f run_configure.mk OMRGLUE=./example/glue SPEC=linux_x86-64_cmprssptrs PLATFORM=amd64-linux64-gcc HAS_AUTOCONF=1 distclean all'''
                    
                    echo 'Compile...'
                    sh '''make -j4'''
                    
                    echo 'Output CCACHE stats after running'
                    sh '''ccache -s'''
                }
            }
        }
        stage('Test') {
            steps {
                timestamps {
                    echo "Sanity Test..."
                    sh'''make test'''
                }
            }
        }
    }
    post {
        success {
            setBuildStatus("Complete","SUCCESS","${MERGE_COMMIT}")
        }
        failure {
            setBuildStatus("Complete","FAILURE","${MERGE_COMMIT}")
        }
        always {
            echo 'Cleanup workspace'
            deleteDir()
        }
    }
}

